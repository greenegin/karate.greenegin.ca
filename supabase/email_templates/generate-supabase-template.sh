#!/bin/bash

# Generate Supabase Email Templates from Internal Templates
# This script reads configuration from site.ts and generates the final Supabase templates

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Template definitions (type:filename:description)
TEMPLATES="
signup:supabase-signup-email-template:Confirm signup
invite:supabase-invite-email-template:Invite user
magiclink:supabase-magiclink-email-template:Magic Link
changeemail:supabase-changeemail-email-template:Change email address
resetpassword:supabase-resetpassword-email-template:Reset password
reauth:supabase-reauth-email-template:Reauthentication
edgefunction:edge-function-email-template:Edge Function Email Template
"

# Function to get template file by type
get_template_file() {
    local type="$1"
    echo "$TEMPLATES" | grep "^$type:" | cut -d: -f2
}

# Function to get template description by type
get_template_description() {
    local type="$1"
    echo "$TEMPLATES" | grep "^$type:" | cut -d: -f3
}

# Function to get all template types
get_all_types() {
    echo "$TEMPLATES" | grep -v '^$' | cut -d: -f1
}

# Function to check if template type exists
template_exists() {
    local type="$1"
    echo "$TEMPLATES" | grep -q "^$type:"
}

# Function to show usage
 show_usage() {
     echo -e "${BLUE}📋 Usage: $0 [template_type]${NC}"
     echo -e "${BLUE}Available template types:${NC}"
     echo "$TEMPLATES" | grep -v '^$' | while IFS=: read -r type file desc; do
         echo -e "   ${type} - ${desc}"
     done
     echo -e "${BLUE}Examples:${NC}"
     echo -e "   $0 signup          # Generate signup template only"
     echo -e "   $0                 # Generate all templates"
 }

# Function to generate a single template
 generate_template() {
     local template_type="$1"
     local template_file=$(get_template_file "$template_type")
     local description=$(get_template_description "$template_type")
     
     if [ -z "$template_file" ]; then
         echo -e "${RED}❌ Error: Unknown template type '$template_type'${NC}"
         return 1
     fi
     
     echo -e "${YELLOW}🔄 Generating ${description} template...${NC}"
     
     # Check if internal template exists
     if [ ! -f "${template_file}.internal.html" ]; then
         echo -e "${RED}❌ Error: ${template_file}.internal.html not found${NC}"
         return 1
     fi
     
     # Generate the final template
     sed "s|{{SITE_NAME}}|${SITE_NAME}|g" "${template_file}.internal.html" | \
     sed "s|{{PRIMARY_COLOR}}|${PRIMARY_COLOR}|g" | \
     sed "s|#469a45; /\* Will be replaced with {{PRIMARY_COLOR}} \*/|${PRIMARY_COLOR}|g" | \
     sed "s|{{SITE_URL}}|${SITE_URL}|g" | \
     sed "s|{{LOGO_URL}}|${LOGO_URL}|g" | \
     sed "s|{{CONTACT_PHONE}}|${CONTACT_PHONE}|g" | \
     sed "s|{{CONTACT_EMAIL}}|${CONTACT_EMAIL}|g" > "${template_file}.html"
     
     # Add generation comment at the top
     echo "<!--" > temp_header.txt
     echo "AUTO-GENERATED SUPABASE EMAIL TEMPLATE - $(echo "${description}" | tr '[:lower:]' '[:upper:]')" >> temp_header.txt
     echo "======================================" >> temp_header.txt
     echo "" >> temp_header.txt
     echo "This file was automatically generated from ${template_file}.internal.html" >> temp_header.txt
     echo "using the generate-supabase-template.sh script." >> temp_header.txt
     echo "" >> temp_header.txt
     echo "DO NOT EDIT THIS FILE DIRECTLY!" >> temp_header.txt
     echo "Instead, modify ${template_file}.internal.html and run:" >> temp_header.txt
     echo "./generate-supabase-template.sh ${template_type}" >> temp_header.txt
     echo "" >> temp_header.txt
     echo "Generated on: $(date)" >> temp_header.txt
     echo "Configuration source: app/config/site.ts" >> temp_header.txt
     echo "-->" >> temp_header.txt
     echo "" >> temp_header.txt
     
     # Combine header with generated content
     cat temp_header.txt "${template_file}.html" > temp_final.html
     mv temp_final.html "${template_file}.html"
     rm temp_header.txt
     
     # Show file size
     FILE_SIZE=$(wc -c < "${template_file}.html")
     echo -e "${GREEN}✅ ${description} template generated: ${template_file}.html (${FILE_SIZE} bytes)${NC}"
 }

# Parse command line arguments
TEMPLATE_TYPE="$1"

if [ "$TEMPLATE_TYPE" = "-h" ] || [ "$TEMPLATE_TYPE" = "--help" ]; then
    show_usage
    exit 0
fi

if [ -n "$TEMPLATE_TYPE" ] && ! template_exists "$TEMPLATE_TYPE"; then
     echo -e "${RED}❌ Error: Unknown template type '$TEMPLATE_TYPE'${NC}"
     show_usage
     exit 1
 fi

echo -e "${GREEN}🚀 Generating Supabase email template(s)...${NC}"

# Check if required files exist
if [ ! -f "../../app/config/site.ts" ]; then
    echo -e "${RED}❌ Error: app/config/site.ts not found${NC}"
    exit 1
fi

# Extract values from site.ts using Node.js
echo -e "${YELLOW}📖 Reading configuration from site.ts...${NC}"

# Create a temporary Node.js script to extract values
cat > extract_config.cjs << 'EOF'
const fs = require('fs');
const path = require('path');

// Read site.ts file
const siteContent = fs.readFileSync('../../app/config/site.ts', 'utf8');

// Extract site name
const nameMatch = siteContent.match(/name:\s*["']([^"']+)["']/);
const siteName = nameMatch ? nameMatch[1] : 'GREENEGIN KARATE';

// Extract primary color from colors object
const colorMatch = siteContent.match(/colors:\s*{[^}]*primary:\s*["']([^"']+)["'][^}]*}/);
const primaryColor = colorMatch ? colorMatch[1] : '#469a45';

// Extract contact information
const phoneMatch = siteContent.match(/contact:\s*{[^}]*phone:\s*["']([^"']+)["'][^}]*}/);
const contactPhone = phoneMatch ? phoneMatch[1] : '(604) 123-4567';

const emailMatch = siteContent.match(/contact:\s*{[^}]*email:\s*["']([^"']+)["'][^}]*}/);
const contactEmail = emailMatch ? emailMatch[1] : 'info@greenegin.ca';

// Extract site URL (look for siteUrl variable)
const urlMatch = siteContent.match(/(?:const\s+)?siteUrl\s*=\s*["']([^"']+)["']/) || 
                siteContent.match(/url:\s*["']([^"']+)["']/) ||
                siteContent.match(/url:\s*siteUrl/);

let siteUrl = 'https://karate.greenegin.ca';
if (urlMatch && urlMatch[1]) {
    siteUrl = urlMatch[1];
} else if (siteContent.includes('url: siteUrl')) {
    // Look for siteUrl definition
    const siteUrlMatch = siteContent.match(/const\s+siteUrl\s*=\s*["']([^"']+)["']/);
    if (siteUrlMatch) {
        siteUrl = siteUrlMatch[1];
    }
}

// Output as JSON for easy parsing
console.log(JSON.stringify({
    siteName,
    primaryColor,
    siteUrl,
    logoUrl: `${siteUrl}/logo-light.svg`,
    contactPhone,
    contactEmail
}));
EOF

# Extract configuration
CONFIG=$(node extract_config.cjs)
SITE_NAME=$(echo $CONFIG | node -e "console.log(JSON.parse(require('fs').readFileSync(0, 'utf8')).siteName)")
PRIMARY_COLOR=$(echo $CONFIG | node -e "console.log(JSON.parse(require('fs').readFileSync(0, 'utf8')).primaryColor)")
SITE_URL=$(echo $CONFIG | node -e "console.log(JSON.parse(require('fs').readFileSync(0, 'utf8')).siteUrl)")
LOGO_URL=$(echo $CONFIG | node -e "console.log(JSON.parse(require('fs').readFileSync(0, 'utf8')).logoUrl)")
CONTACT_PHONE=$(echo $CONFIG | node -e "console.log(JSON.parse(require('fs').readFileSync(0, 'utf8')).contactPhone)")
CONTACT_EMAIL=$(echo $CONFIG | node -e "console.log(JSON.parse(require('fs').readFileSync(0, 'utf8')).contactEmail)")

echo -e "${GREEN}✅ Configuration extracted:${NC}"
echo -e "   Site Name: ${SITE_NAME}"
echo -e "   Primary Color: ${PRIMARY_COLOR}"
echo -e "   Site URL: ${SITE_URL}"
echo -e "   Logo URL: ${LOGO_URL}"
echo -e "   Contact Phone: ${CONTACT_PHONE}"
echo -e "   Contact Email: ${CONTACT_EMAIL}"
echo ""

# Generate templates
 if [ -n "$TEMPLATE_TYPE" ]; then
     # Generate single template
     generate_template "$TEMPLATE_TYPE"
 else
     # Generate all templates
     echo -e "${BLUE}📋 Generating all email templates...${NC}"
     get_all_types | while read -r template_type; do
         [ -n "$template_type" ] && generate_template "$template_type"
     done
 fi

# Clean up temporary file
rm extract_config.cjs

echo ""
echo -e "${GREEN}🎉 Template(s) generated successfully!${NC}"
echo -e "${YELLOW}💡 Copy the contents of the generated .html files to your Supabase Email Templates dashboard${NC}"
echo -e "${YELLOW}🔗 Dashboard: Authentication > Email Templates${NC}"
echo ""
echo -e "${BLUE}📋 Template mapping:${NC}"
echo -e "   ${YELLOW}Supabase dashboard templates:${NC}"
echo -e "   supabase-signup-email-template.html     → Confirm signup"
echo -e "   supabase-invite-email-template.html     → Invite user"
echo -e "   supabase-magiclink-email-template.html  → Magic Link"
echo -e "   supabase-changeemail-email-template.html → Change email address"
echo -e "   supabase-resetpassword-email-template.html → Reset password"
echo -e "   supabase-reauth-email-template.html     → Reauthentication"
echo -e "   ${YELLOW}Edge function template:${NC}"
echo -e "   edge-function-email-template.html       → Copy to supabase/functions/_shared/email-templates.ts"

echo -e "\n${GREEN}✨ Done! Your Supabase email templates are ready to use.${NC}"